{"env_info": "sys.platform: win32\nPython: 3.9.15 (main, Nov 24 2022, 14:39:17) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX 1660 Ti\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.7\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nMSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.34.31937 for x64\nGCC: n/a\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.5.0\nMMCV Compiler: MSVC 193431937\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.22.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'balloon'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file='balloon/annotations/train.json',\n        img_prefix='balloon/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='balloon/annotations/val.json',\n        img_prefix='balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='balloon/annotations/val.json',\n        img_prefix='balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'], interval=2)\noptimizer = dict(type='SGD', lr=0.0008, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[10, 20])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'C:/Users/Yly/.cache/mim/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nwork_dir = 'res_me'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 839360223, "exp_name": "train.py"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.094, "bbox_mAP_50": 0.156, "bbox_mAP_75": 0.097, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.054, "bbox_mAP_l": 0.139, "bbox_mAP_copypaste": "0.094 0.156 0.097 0.003 0.054 0.139", "segm_mAP": 0.123, "segm_mAP_50": 0.161, "segm_mAP_75": 0.13, "segm_mAP_s": 0.014, "segm_mAP_m": 0.045, "segm_mAP_l": 0.322, "segm_mAP_copypaste": "0.123 0.161 0.130 0.014 0.045 0.322"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.62, "bbox_mAP_50": 0.801, "bbox_mAP_75": 0.77, "bbox_mAP_s": 0.02, "bbox_mAP_m": 0.518, "bbox_mAP_l": 0.689, "bbox_mAP_copypaste": "0.620 0.801 0.770 0.020 0.518 0.689", "segm_mAP": 0.708, "segm_mAP_50": 0.797, "segm_mAP_75": 0.789, "segm_mAP_s": 0.021, "segm_mAP_m": 0.54, "segm_mAP_l": 0.798, "segm_mAP_copypaste": "0.708 0.797 0.789 0.021 0.540 0.798"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.0003, "bbox_mAP": 0.675, "bbox_mAP_50": 0.849, "bbox_mAP_75": 0.814, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.639, "bbox_mAP_l": 0.723, "bbox_mAP_copypaste": "0.675 0.849 0.814 0.025 0.639 0.723", "segm_mAP": 0.763, "segm_mAP_50": 0.843, "segm_mAP_75": 0.836, "segm_mAP_s": 0.039, "segm_mAP_m": 0.664, "segm_mAP_l": 0.825, "segm_mAP_copypaste": "0.763 0.843 0.836 0.039 0.664 0.825"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.0004, "bbox_mAP": 0.724, "bbox_mAP_50": 0.89, "bbox_mAP_75": 0.837, "bbox_mAP_s": 0.033, "bbox_mAP_m": 0.617, "bbox_mAP_l": 0.779, "bbox_mAP_copypaste": "0.724 0.890 0.837 0.033 0.617 0.779", "segm_mAP": 0.777, "segm_mAP_50": 0.871, "segm_mAP_75": 0.86, "segm_mAP_s": 0.056, "segm_mAP_m": 0.654, "segm_mAP_l": 0.833, "segm_mAP_copypaste": "0.777 0.871 0.860 0.056 0.654 0.833"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00049, "bbox_mAP": 0.747, "bbox_mAP_50": 0.9, "bbox_mAP_75": 0.851, "bbox_mAP_s": 0.02, "bbox_mAP_m": 0.69, "bbox_mAP_l": 0.795, "bbox_mAP_copypaste": "0.747 0.900 0.851 0.020 0.690 0.795", "segm_mAP": 0.784, "segm_mAP_50": 0.874, "segm_mAP_75": 0.869, "segm_mAP_s": 0.029, "segm_mAP_m": 0.675, "segm_mAP_l": 0.845, "segm_mAP_copypaste": "0.784 0.874 0.869 0.029 0.675 0.845"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.758, "bbox_mAP_50": 0.903, "bbox_mAP_75": 0.854, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.701, "bbox_mAP_l": 0.808, "bbox_mAP_copypaste": "0.758 0.903 0.854 0.025 0.701 0.808", "segm_mAP": 0.789, "segm_mAP_50": 0.878, "segm_mAP_75": 0.873, "segm_mAP_s": 0.042, "segm_mAP_m": 0.69, "segm_mAP_l": 0.848, "segm_mAP_copypaste": "0.789 0.878 0.873 0.042 0.690 0.848"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 7e-05, "bbox_mAP": 0.757, "bbox_mAP_50": 0.903, "bbox_mAP_75": 0.854, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.69, "bbox_mAP_l": 0.811, "bbox_mAP_copypaste": "0.757 0.903 0.854 0.025 0.690 0.811", "segm_mAP": 0.798, "segm_mAP_50": 0.877, "segm_mAP_75": 0.872, "segm_mAP_s": 0.034, "segm_mAP_m": 0.684, "segm_mAP_l": 0.861, "segm_mAP_copypaste": "0.798 0.877 0.872 0.034 0.684 0.861"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 8e-05, "bbox_mAP": 0.769, "bbox_mAP_50": 0.907, "bbox_mAP_75": 0.858, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.695, "bbox_mAP_l": 0.826, "bbox_mAP_copypaste": "0.769 0.907 0.858 0.025 0.695 0.826", "segm_mAP": 0.8, "segm_mAP_50": 0.882, "segm_mAP_75": 0.877, "segm_mAP_s": 0.042, "segm_mAP_m": 0.685, "segm_mAP_l": 0.863, "segm_mAP_copypaste": "0.800 0.882 0.877 0.042 0.685 0.863"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 8e-05, "bbox_mAP": 0.769, "bbox_mAP_50": 0.908, "bbox_mAP_75": 0.857, "bbox_mAP_s": 0.034, "bbox_mAP_m": 0.694, "bbox_mAP_l": 0.826, "bbox_mAP_copypaste": "0.769 0.908 0.857 0.034 0.694 0.826", "segm_mAP": 0.797, "segm_mAP_50": 0.883, "segm_mAP_75": 0.877, "segm_mAP_s": 0.05, "segm_mAP_m": 0.686, "segm_mAP_l": 0.86, "segm_mAP_copypaste": "0.797 0.883 0.877 0.050 0.686 0.860"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 8e-05, "bbox_mAP": 0.761, "bbox_mAP_50": 0.904, "bbox_mAP_75": 0.834, "bbox_mAP_s": 0.034, "bbox_mAP_m": 0.672, "bbox_mAP_l": 0.818, "bbox_mAP_copypaste": "0.761 0.904 0.834 0.034 0.672 0.818", "segm_mAP": 0.796, "segm_mAP_50": 0.879, "segm_mAP_75": 0.873, "segm_mAP_s": 0.04, "segm_mAP_m": 0.678, "segm_mAP_l": 0.858, "segm_mAP_copypaste": "0.796 0.879 0.873 0.040 0.678 0.858"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.761, "bbox_mAP_50": 0.904, "bbox_mAP_75": 0.834, "bbox_mAP_s": 0.034, "bbox_mAP_m": 0.671, "bbox_mAP_l": 0.819, "bbox_mAP_copypaste": "0.761 0.904 0.834 0.034 0.671 0.819", "segm_mAP": 0.794, "segm_mAP_50": 0.878, "segm_mAP_75": 0.872, "segm_mAP_s": 0.04, "segm_mAP_m": 0.678, "segm_mAP_l": 0.855, "segm_mAP_copypaste": "0.794 0.878 0.872 0.040 0.678 0.855"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.757, "bbox_mAP_50": 0.901, "bbox_mAP_75": 0.832, "bbox_mAP_s": 0.05, "bbox_mAP_m": 0.671, "bbox_mAP_l": 0.814, "bbox_mAP_copypaste": "0.757 0.901 0.832 0.050 0.671 0.814", "segm_mAP": 0.796, "segm_mAP_50": 0.876, "segm_mAP_75": 0.87, "segm_mAP_s": 0.05, "segm_mAP_m": 0.678, "segm_mAP_l": 0.859, "segm_mAP_copypaste": "0.796 0.876 0.870 0.050 0.678 0.859"}
{"mode": "val", "epoch": 26, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.756, "bbox_mAP_50": 0.901, "bbox_mAP_75": 0.832, "bbox_mAP_s": 0.05, "bbox_mAP_m": 0.668, "bbox_mAP_l": 0.813, "bbox_mAP_copypaste": "0.756 0.901 0.832 0.050 0.668 0.813", "segm_mAP": 0.792, "segm_mAP_50": 0.876, "segm_mAP_75": 0.87, "segm_mAP_s": 0.05, "segm_mAP_m": 0.678, "segm_mAP_l": 0.852, "segm_mAP_copypaste": "0.792 0.876 0.870 0.050 0.678 0.852"}
{"mode": "val", "epoch": 28, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.756, "bbox_mAP_50": 0.9, "bbox_mAP_75": 0.831, "bbox_mAP_s": 0.05, "bbox_mAP_m": 0.66, "bbox_mAP_l": 0.814, "bbox_mAP_copypaste": "0.756 0.900 0.831 0.050 0.660 0.814", "segm_mAP": 0.791, "segm_mAP_50": 0.875, "segm_mAP_75": 0.869, "segm_mAP_s": 0.05, "segm_mAP_m": 0.668, "segm_mAP_l": 0.853, "segm_mAP_copypaste": "0.791 0.875 0.869 0.050 0.668 0.853"}
{"mode": "val", "epoch": 30, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.755, "bbox_mAP_50": 0.901, "bbox_mAP_75": 0.831, "bbox_mAP_s": 0.05, "bbox_mAP_m": 0.66, "bbox_mAP_l": 0.813, "bbox_mAP_copypaste": "0.755 0.901 0.831 0.050 0.660 0.813", "segm_mAP": 0.791, "segm_mAP_50": 0.875, "segm_mAP_75": 0.869, "segm_mAP_s": 0.05, "segm_mAP_m": 0.668, "segm_mAP_l": 0.852, "segm_mAP_copypaste": "0.791 0.875 0.869 0.050 0.668 0.852"}
